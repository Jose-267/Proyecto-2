# Import standard python modules.
import sys
import time
import serial
# This example uses the MQTTClient instead of the REST client
from Adafruit_IO import MQTTClient
from Adafruit_IO import Client, Feed

# holds the count for the feed
run_count = 0

# Set to your Adafruit IO username and key.
# Remember, your key is a secret,
# so make sure not to publish it when you publish this code!
ADAFRUIT_IO_USERNAME = ""
ADAFRUIT_IO_KEY = ""

# Set to the ID of the feed to subscribe to for updates.
FEED_ID_receive = 'Direccion_TX'
FEED_ID_Send = 'Direccion_RX'

FEED_ID_receive2 = 'Potencia_TX'
FEED_ID_Send2 = 'Potencia_RX'

FEED_ID_receive3 = 'Base_TX'
FEED_ID_Send3 = 'Base_RX'

FEED_ID_receive4 = 'Brazo_TX'
FEED_ID_Send4 = 'Brazo_RX'



# Define "callback" functions which will be called when certain events 
# happen (connected, disconnected, message arrived).
def connected(client):
    """Connected function will be called when the client is connected to
    Adafruit IO.This is a good place to subscribe to feed changes. The client
    parameter passed to this function is the Adafruit IO MQTT client so you
    can make calls against it easily.
    """
    # Subscribe to changes on a feed named Counter.
    print('Subscribing to Feed {0}'.format(FEED_ID_receive))

    client.subscribe(FEED_ID_receive)
    client.subscribe(FEED_ID_receive2)
    client.subscribe(FEED_ID_receive3)
    client.subscribe(FEED_ID_receive4)

    print('Waiting for feed data...')

   

def disconnected(client):
    """Disconnected function will be called when the client disconnects."""
    sys.exit(1)

def message(client, feed_id, payload):
    """Message function will be called when a subscribed feed has a new value.
    The feed_id parameter identifies the feed, and the payload parameter has
    the new value.
    """
    
    if feed_id == FEED_ID_receive:
        letra = 'd'
        client.publish(FEED_ID_Send, payload)
        
    elif feed_id == FEED_ID_receive2:
        letra = 'p'
        client.publish(FEED_ID_Send2, payload)
       
    elif feed_id == FEED_ID_receive3:
        letra = 'b'
        client.publish(FEED_ID_Send3, payload)        
        
    elif feed_id == FEED_ID_receive4:
        letra = 'e'
        client.publish(FEED_ID_Send4, payload)   
    
    else:
        return
    # Publish or "send" message to corresponding feed
    comando = f"{letra}{payload}\n"
    print(f"Enviado al arduino: {comando.strip()}")
    miarduino.write(comando.encode())


# Create an MQTT client instance.
client = MQTTClient(ADAFRUIT_IO_USERNAME, ADAFRUIT_IO_KEY)

miarduino = serial.Serial(port='COM7', baudrate=9600, timeout=0.1)

# Setup the callback functions defined above.
client.on_connect = connected
client.on_disconnect = disconnected
client.on_message = message

# Connect to the Adafruit IO server.
client.connect()

# The first option is to run a thread in the background so you can continue
# doing things in your program.
client.loop_background()


while True:
    """ 
    # Uncomment the next 3 lines if you want to constantly send data
    # Adafruit IO is rate-limited for publishing
    # so we'll need a delay for calls to aio.send_data()
    run_count += 1
    print('sending count: ', run_count)
    client.publish(FEED_ID_Send, run_count)
    """
    print('Running "main loop" ')
    time.sleep(3)
