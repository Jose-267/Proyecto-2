/* ================================ main.c ================================ */
/* Firmware de tres modos:
   Modo 0 – control manual con potenciómetros + grabado en EEPROM
   Modo 1 – reproducción secuencial de los presets guardados
   Modo 2 – control interactivo por UART (puente Adafruit-IO → Python → ATmega)
*/

#define F_CPU 16000000UL        /* frecuencia del cristal – usada por util/delay */

#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>            /* atoi() */

#include "adc.h"
#include "servo.h"
#include "motor.h"
#include "eeprom_layout.h"
#include "preset.h"
#include "uart.h"              /* RX_BUF y API UART */

/* ------------------- pines de usuario ------------------- */
#define BTN_MODE_PIN PD2       /* botón: cambia de modo 0→1→2→0… */
#define BTN_ACT_PIN  PD7       /* botón: acción dentro del modo (grabar / play) */
#define LED_A_PIN    PB0       /* LED indicador modo 0 (D8)  */
#define LED_B_PIN    PB3       /* LED indicador modo 1 (D11) */

/* ---- rangos predefinidos de los servos ---- */
#define SERVO_A_MIN 3000U      /* Ancho de pulso mínimo para servo A (dirección) */
#define SERVO_A_MAX 5000U      /* Máximo (rango restringido a 60 pasos) */

#define SERVO_AB_MIN 1000U     /* Servos B (base) 0° */
#define SERVO_AB_MAX 5000U     /*               180° */

#define SERVO_C_MIN  1000U     /* Servo C (brazo) 0° */
#define SERVO_C_MAX  2500U     /*                  180° */

#define DEG_CLAMP(v)  ((v) > 180 ? 180 : (v))   /* limita ángulo a 0-180 ° */

/* ------------------- variables de estado ------------------ */
static uint8_t  mode = 0;              /* 0 = manual, 1 = play, 2 = UART */
static uint8_t  save_slot = 0;         /* próximo slot donde grabar */
static uint8_t  play_slot = 0;         /* próximo slot a reproducir */
static volatile uint8_t blink_cnt = 0; /* contador para parpadeo no-bloqueante */

/* Valores en memoria para el modo 2 (se actualizan con cada comando UART) */
static uint16_t us_dir  = 3000;  /* servo A (dirección) */
static uint16_t us_base = 1500;  /* servo B (base)      */
static uint16_t us_arm  = 1500;  /* servo C (brazo)     */
static uint8_t  duty_dc = 0;     /* motor DC (0-255)    */

/* ======================================================================= */
/* --------------- Funciones auxiliares comunes -------------------------- */

/* Promedia 'n' lecturas ADC para reducir ruido */
static uint16_t adc_avg(uint8_t ch, uint8_t n)
{
    uint32_t s = 0;
    for (uint8_t i = 0; i < n; i++) s += ADC_read(ch);
    return (uint16_t)(s / n);
}

/* Enciende el LED correspondiente según el modo actual */
static void leds_set(uint8_t m)
{
    PORTB &= ~((1<<LED_A_PIN)|(1<<LED_B_PIN));      /* apaga ambos */
    if      (m == 0) PORTB |= (1<<LED_A_PIN);
    else if (m == 1) PORTB |= (1<<LED_B_PIN);
    else              PORTB |= (1<<LED_A_PIN)|(1<<LED_B_PIN); /* modo 2 */
}

/* Detectores de flanco de bajada para los botones (sin bloqueo) */
static bool edge_PD2(void) { static uint8_t last=1; uint8_t now=(PIND&_BV(PD2))?1:0; bool e= last && !now; last=now; return e; }
static bool edge_PD7(void) { static uint8_t last=1; uint8_t now=(PIND&_BV(PD7))?1:0; bool e= last && !now; last=now; return e; }

/* Parpadeo de confirmación (no detiene el bucle principal) */
static void blink_start(uint8_t led, uint8_t times) { blink_cnt = (led<<4) | (times*10); }
static void blink_task(void){
    if (blink_cnt){
        uint8_t led_pin = blink_cnt >> 4;
        if (!(blink_cnt & 1)) PORTB ^= (1<<led_pin); /* toggle cada 20 ms */
        blink_cnt--;
    }
}
/* ======================================================================= */

int main(void)
{
    /* ---------- Configuración de E/S ---------- */
    DDRB |= (1<<LED_A_PIN)|(1<<LED_B_PIN);          /* LEDs como salida */
    DDRD &= ~((1<<BTN_MODE_PIN)|(1<<BTN_ACT_PIN));  /* botones como entrada */
    PORTD |=  (1<<BTN_MODE_PIN)|(1<<BTN_ACT_PIN);   /* pull-ups activos */

    leds_set(0);                                    /* Modo inicial 0 */

    /* ---------- Inicialización de periféricos ---------- */
    ADC_init();
    servo_init();         /* Timer-1: servos A y B */
    servoC_init();        /* Timer-2: servo C      */
    motor_init();         /* Timer-0: motor DC     */
    uart_init(9600);      /* UART para modo 2      */

    /* ---------- Variables temporales ---------- */
    uint16_t a0,a1,a2,am, usA,usB,usC;

    while (1)
    {
        /* ---- Botón MODE: avanza 0 → 1 → 2 → 0 ---- */
        if (edge_PD2()) {
            mode = (mode + 1) % 3;
            leds_set(mode);
            save_slot = play_slot = 0;              /* reinicia índices */
        }

        /* ---------------- Lógica según modo ---------------- */
        switch (mode)
        {
            /* ============ MODO 0: manual + grabar ============ */
            case 0:
                /* Lectura de potenciómetros (4 muestras cada uno) */
                a0 = adc_avg(0,4);  a1 = adc_avg(1,4);
                a2 = adc_avg(2,4);  am = adc_avg(3,4);

                /* Mapear 0-1023 a µs o duty */
                usB = (uint32_t)a0 * 4000 / 1023 + 1000;  /* servo B */
                usA = (uint32_t)a1 * 4000 / 1023 + 1000;  /* servo A */
                usC = (uint32_t)a2 * 1500 / 1023 + 1000;  /* servo C */

                /* Aplicar */
                servoB_setDuty(usB);
                servoA_setDuty(usA);
                servoC_setDuty(usC);
                motor_set_from_adc(am);

                /* Botón ACT → guarda preset */
                if (edge_PD7()) {
                    preset_save(save_slot);
                    blink_start(LED_A_PIN, 1);          /* destello */
                    save_slot = (save_slot + 1) % NUM_SLOTS;
                }
                break;

            /* ============ MODO 1: reproducir ============ */
            case 1:
                if (edge_PD7()) {                        /* siguiente slot */
                    preset_load(play_slot);
                    blink_start(LED_B_PIN, play_slot+1);/* parpadea N veces */
                    play_slot = (play_slot + 1) % NUM_SLOTS;
                }
                break;

            /* ============ MODO 2: control UART ============ */
            case 2:
                /* Procesa línea completa “<id><valor>\n” */
                if (uart_available()) {
                    char linea[RX_BUF];
                    uart_read_cmd(linea);

                    char id = linea[0];
                    int16_t v = atoi(&linea[1]);         /* puede ser negativo */

                    switch (id) {
                        /* ---- Servo A: 0-60 pasos → 3000-5000 µs ---- */
                        case 'd':
                            if (v < 0) v = 0; else if (v > 60) v = 60;
                            us_dir = SERVO_A_MIN + (uint32_t)v * (SERVO_A_MAX - SERVO_A_MIN) / 60;
                            break;

                        /* ---- Servo B: 0-180° estándar ---- */
                        case 'b': {
                            uint16_t deg = DEG_CLAMP(v);
                            us_base = SERVO_AB_MIN + (uint32_t)deg * (SERVO_AB_MAX - SERVO_AB_MIN) / 180;
                        }   break;

                        /* ---- Servo C: 0-180° pero 1000-2500 µs ---- */
                        case 'e': {
                            uint16_t deg = DEG_CLAMP(v);
                            us_arm  = SERVO_C_MIN + (uint32_t)deg * (SERVO_C_MAX - SERVO_C_MIN) / 180;
                        }   break;

                        /* ---- Motor DC: −10 / 0 / +10 ---- */
                        case 'p':
                            if (v < -10) v = -10; else if (v > 10) v =  10;

                            if (v == 0) {                /* detener */
                                duty_dc = 0;
                                PORTD &= ~((1<<PD4)|(1<<PD5));   /* coast */
                            } else {
                                duty_dc = 25 * (uint8_t)abs(v);  /* 25×10 ≈ 250 */
                                if (v > 0) {                     /* adelante */
                                    PORTD |=  (1<<PD4);
                                    PORTD &= ~(1<<PD5);
                                } else {                         /* reversa */
                                    PORTD |=  (1<<PD5);
                                    PORTD &= ~(1<<PD4);
                                }
                                OCR0A = duty_dc;                 /* actualiza PWM */
                            }
                            break;
                        default: break;   /* comando desconocido */
                    }
                    uart_write_str("OK\n");              /* eco de confirmación */
                }

                /* Aplicar continuamente los valores actuales */
                servoA_setDuty(us_dir);
                servoB_setDuty(us_base);
                servoC_setDuty(us_arm);
                /* PWM del motor ya se actualiza en 'p'       */
                break;
        }

        /* ---------- Tareas comunes ---------- */
        blink_task();        /* parpadeo sin bloquear */
        _delay_ms(20);       /* ~50 Hz de loop        */
    }
}
